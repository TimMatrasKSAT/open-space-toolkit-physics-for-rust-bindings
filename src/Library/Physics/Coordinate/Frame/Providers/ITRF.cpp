////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @project        Library/Physics
/// @file           Library/Physics/Coordinate/Frame/Providers/ITRF.cpp
/// @author         Lucas Br√©mond <lucas@loftorbital.com>
/// @license        TBD

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Library/Physics/Coordinate/Frame/Providers/ITRF.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace library
{
namespace physics
{
namespace coord
{
namespace frame
{
namespace provider
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                ITRF::ITRF                                  ( )
{

}

                                ITRF::~ITRF                                 ( )
{

}

ITRF*                           ITRF::clone                                 ( ) const
{
    return new ITRF(*this) ;
}

bool                            ITRF::isDefined                             ( ) const
{
    return true ;
}

Transform                       ITRF::getTransformAt                        (   const   Instant&                    anInstant                                   ) const
{
    return Transform(anInstant, Vector3d(1.0, 2.0, 3.0), Vector3d(4.0, 5.0, 6.0), Quaternion::Unit(), Vector3d::Zero()) ; // [TBI] This is just for testing...
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////