////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @project        Library/Physics
/// @file           Library/Physics/Coordinate/Frame/Providers/CIRF.cpp
/// @author         Lucas Br√©mond <lucas@loftorbital.com>
/// @license        TBD

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Library/Physics/Coordinate/Frame/Providers/CIRF.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace library
{
namespace physics
{
namespace coord
{
namespace frame
{
namespace provider
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                CIRF::CIRF                                  ( )
{

}

                                CIRF::~CIRF                                 ( )
{

}

CIRF*                           CIRF::clone                                 ( ) const
{
    return new CIRF(*this) ;
}

bool                            CIRF::isDefined                             ( ) const
{
    return true ;
}

Transform                       CIRF::getTransformAt                        (   const   Instant&                    anInstant                                   ) const
{
    return Transform(anInstant, Vector3d(1.0, 1.0, 1.0), Vector3d(1.0, 1.0, 1.0), Quaternion::Unit(), Vector3d::Zero()) ; // [TBI] This is just for testing...
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////