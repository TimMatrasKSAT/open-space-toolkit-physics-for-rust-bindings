////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @project        Library/Physics
/// @file           Library/Physics/Environment/Ephemerides/Analytical.hpp
/// @author         Lucas Br√©mond <lucas@loftorbital.com>
/// @license        TBD

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __Library_Physics_Environment_Ephemerides_Analytical__
#define __Library_Physics_Environment_Ephemerides_Analytical__

#include <Library/Physics/Environment/Ephemeris.hpp>
#include <Library/Physics/Coordinate/Frame.hpp>
#include <Library/Physics/Time/Instant.hpp>

#include <Library/Core/Types/Shared.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace library
{
namespace physics
{
namespace env
{
namespace ephem
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using library::core::types::Shared ;

using library::physics::time::Instant ;
using library::physics::coord::Frame ;
using library::physics::env::Ephemeris ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Analytical : public Ephemeris
{

    public:

                                Analytical                                  (   const   Shared<const Frame>&        aFrameSPtr                                  ) ;

        virtual                 ~Analytical                                 ( ) override ;

        virtual Analytical*     clone                                       ( ) const override ;

        virtual bool            isDefined                                   ( ) const override ;

        virtual Shared<const Frame> accessFrame                             ( ) const override ;

    private:

        Shared<const Frame>     frameSPtr_ ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////